name: Deploy Preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.0.6
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build packages
        run: pnpm build --filter=shadcn

      - name: Build v4 app for static export
        env:
          NEXT_BASE_PATH: /pr-${{ github.event.number }}
          NEXT_PUBLIC_APP_URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${{ github.event.number }}
        run: pnpm v4:build:static

      - name: Prepare deployment
        run: |
          mkdir -p deploy/pr-${{ github.event.number }}
          cp -r apps/v4/out/* deploy/pr-${{ github.event.number }}/

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update gh-pages
        run: |
          # Create gh-pages branch if it doesn't exist
          if [ ! -d "gh-pages" ]; then
            mkdir gh-pages
            cd gh-pages
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
            git checkout -b gh-pages
            echo "# Deploy Previews" > README.md
            git add README.md
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Initial gh-pages commit"
            cd ..
          fi
          
          # Remove existing PR directory if it exists
          rm -rf gh-pages/pr-${{ github.event.number }}
          
          # Copy new build
          cp -r deploy/pr-${{ github.event.number }} gh-pages/
          
          # Update index with list of PRs
          cd gh-pages
          echo "# Deploy Previews" > README.md
          echo "" >> README.md
          echo "Available preview deployments:" >> README.md
          for dir in pr-*; do
            if [ -d "$dir" ]; then
              pr_num=${dir#pr-}
              echo "- [PR #$pr_num](./$dir/)" >> README.md
            fi
          done
          
          git add .
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy preview for PR #${{ github.event.number }}"
            git push origin gh-pages
          fi

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const deployUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-${prNumber}`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Deploy Preview')
            );
            
            const body = `## ðŸš€ Deploy Preview
            
            Preview deployment is ready!
            
            **âœ… Preview:** ${deployUrl}
            
            Built from commit: ${context.sha.slice(0, 7)}
            
            ---
            <sub>This comment will be automatically updated when new commits are pushed.</sub>`;
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: body
              });
            }